#ifndef ADIAR_INTERNAL_DATA_STRUCTURES_STACK_H
#define ADIAR_INTERNAL_DATA_STRUCTURES_STACK_H

#include <tpie/internal_stack.h>

namespace adiar::internal
{
  template <memory_mode mem_mode, typename T>
  class stack;

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Wrapper for TPIE's internal memory stack.
  //////////////////////////////////////////////////////////////////////////////////////////////////
  template<typename T>
  class stack<memory_mode::Internal, T>
  {
  public:
    using value_type = T;

  private:
    tpie::internal_stack<T> _stack;

  public:
    ////////////////////////////////////////////////////////////////////////////////////////////////
    stack(size_t capacity)
      : _stack(capacity)
    {}

    ////////////////////////////////////////////////////////////////////////////////////////////////
    value_type top() // const
    {
      return this->_stack.top();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    void pop()
    {
      this->_stack.pop();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    value_type pull()
    {
      const value_type res = this->_stack.top();
      this->_stack.pop();
      return res;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    void push(const value_type &v)
    {
      this->_stack.push(v);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    size_t size() const
    {
      return this->_stack.size();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    bool empty() const
    {
      return this->_stack.empty();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    void clear()
    {
      this->_stack.clear();
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////
    void clear(size_t new_capacity)
    {
      this->_stack.resize(new_capacity);
    }
  };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief An external memory stack in TPIE.
  //////////////////////////////////////////////////////////////////////////////////////////////////
  // TODO Implement an external memory (temporary) stack (see example in TPIE's documentation).
}

#endif // ADIAR_INTERNAL_DATA_STRUCTURES_STACK_H
