#ifndef ADIAR_INTERNAL_MEMORY_H
#define ADIAR_INTERNAL_MEMORY_H

#include <string>

#include <tpie/tpie.h>
#include <tpie/memory.h>

namespace adiar
{
  namespace memory
  {
    constexpr size_t MINIMUM_BYTES = 128 * 1024 * 1024;

    //////////////////////////////////////////////////////////////////////////////
    /// \brief Sets the path for temporary TPIE files.
    //////////////////////////////////////////////////////////////////////////////
    void set_path(const std::string &temp_dir = "");

    //////////////////////////////////////////////////////////////////////////////
    /// \brief Sets the memory limit for TPIE.
    //////////////////////////////////////////////////////////////////////////////
    void set_limit(size_t memory_limit_bytes = MINIMUM_BYTES);

    //////////////////////////////////////////////////////////////////////////////
    /// \brief Sets the block size for TPIE.
    //////////////////////////////////////////////////////////////////////////////
    void set_block_size(size_t block_size_bytes);

    //////////////////////////////////////////////////////////////////////////////
    /// \brief Get the block size from TPIE.
    //////////////////////////////////////////////////////////////////////////////
    size_t get_block_size();

    //////////////////////////////////////////////////////////////////////////////
    /// \brief Computes a recommended block size to be used with a specific
    ///        amount of available internal memory.
    //////////////////////////////////////////////////////////////////////////////
    size_t recommended_block_size(size_t memory_limit_bytes);

    //////////////////////////////////////////////////////////////////////////////
    /// \brief Obtain from TPIE the amount of available memory.
    //////////////////////////////////////////////////////////////////////////////
    inline size_t available()
    {
      return tpie::get_memory_manager().available();
    }
  }
}

#endif // ADIAR_INTERNAL_MEMORY_H
