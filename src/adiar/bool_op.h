#ifndef ADIAR_BOOL_OP_H
#define ADIAR_BOOL_OP_H

#include <adiar/functional.h>

#include <adiar/internal/data_types/ptr.h>
#include <adiar/internal/data_types/uid.h>

namespace adiar
{
  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'and' operator, i.e. the truth table: [1,0,0,0].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> and_op = [](const bool a, const bool b) -> bool { return a & b; };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'not and' operator, i.e. the truth table: [0,1,1,1].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> nand_op = [](const bool a, const bool b) -> bool { return !(a & b); };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'or' operator, i.e. the truth table: [1,1,1,0].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> or_op = [](const bool a, const bool b) -> bool { return a | b; };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'not or' operator, i.e. the truth table: [0,0,0,1].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> nor_op = [](const bool a, const bool b) -> bool { return !(a | b); };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'xor' operator, i.e. the truth table: [0,1,1,0].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> xor_op = [](const bool a, const bool b) -> bool { return a ^ b; };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'xor' operator, i.e. the truth table: [1,0,0,1].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> xnor_op = [](const bool a, const bool b) -> bool { return a == b; };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'implication' operator, i.e. the truth table: [1,0,1,1].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> imp_op = [](const bool a, const bool b) -> bool { return a <= b; };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'implication' operator, i.e. the truth table: [1,1,0,1].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> invimp_op = [](const bool a, const bool b) -> bool { return b <= a; };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'equivalence' operator, i.e. the 'xnor' operator
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> equiv_op = xnor_op;

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'set difference' operator, i.e. the truth table [0,1,0,0].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> diff_op = [](const bool a, const bool b) -> bool {
    // Alternatively: a > b
    return a & !b;
  };

  //////////////////////////////////////////////////////////////////////////////////////////////////
  /// \brief Logical 'less' operator, i.e. the truth table [0,0,1,0].
  //////////////////////////////////////////////////////////////////////////////////////////////////
  const predicate<bool, bool> less_op = [](const bool a, const bool b) -> bool { return a < b; };
}

#endif // ADIAR_BOOL_H
